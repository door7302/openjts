var name = 'Power_Compute'

var win = 1m
var every = 1m

var traffic_in = stream
    |from()
        .database('jtsdb')
        .retentionPolicy('autogen')
        .measurement('POWER_EXT')
        .where(lambda: isPresent("in_octets_rate"))
        .groupBy('device', 'if_name')
    |window()
        .period(win)
        .every(every)
        .align()
    |httpOut('sensor_ext')

var pps_in = stream
    |from()
        .database('jtsdb')
        .retentionPolicy('autogen')
        .measurement('POWER_EXT')
        .where(lambda: isPresent("in_pkts_rate"))
        .groupBy('device', 'if_name')
    |window()
        .period(win)
        .every(every)
        .align()
    |httpOut('sensor2_ext')

var mean_in_traffic = traffic_in
    |mean('in_octets_rate')
        .as('in_octets_rate')

var mean_in_pps = pps_in
    |mean('in_pkts_rate')
        .as('in_pkts_rate')

var sum_traffic_in = mean_in_traffic
    |groupBy('device')
    |sum('in_octets_rate')
        .as('device_traffic_in')

var sum_pps_in = mean_in_pps
    |groupBy('device')
    |sum('in_pkts_rate')
        .as('device_pps_in')

var influxOut_1 = sum_traffic_in
    |influxDBOut()
        .create()
        .database('jtsdb')
        .retentionPolicy('autogen')
        .measurement('POWER_EXT_KAPA')
        .cluster('influxdb')

var influxOut_2 = sum_pps_in
    |influxDBOut()
        .create()
        .database('jtsdb')
        .retentionPolicy('autogen')
        .measurement('POWER_EXT_KAPA')
        .cluster('influxdb')
